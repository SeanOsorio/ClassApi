
"""
Monster Hunter Weapons API - Aplicaci√≥n Principal

Esta es la API REST completa para gestionar categor√≠as de armas y armas espec√≠ficas
del universo Monster Hunter. Proporciona endpoints para operaciones CRUD completas
con validaciones, manejo de errores y arquitectura MVC.

Caracter√≠sticas principales:
- ‚úÖ CRUD completo para categor√≠as y armas
- ‚úÖ Base de datos PostgreSQL en Railway
- ‚úÖ Validaciones de integridad referencial
- ‚úÖ IDs independientes por tabla
- ‚úÖ Manejo robusto de errores HTTP
- ‚úÖ Documentaci√≥n completa de endpoints

Autor: Sean Osorio
Repositorio: https://github.com/SeanOsorio/ClassApi
Licencia: MIT
"""

from flask import Flask, jsonify
from controllers.weapons_controller import weapons_bp
from config.database import init_db

# =============================================================================
# INICIALIZACI√ìN DE LA APLICACI√ìN FLASK
# =============================================================================

def create_app():
    """
    Factory function para crear y configurar la aplicaci√≥n Flask.
    
    Esta funci√≥n encapsula la creaci√≥n de la app y permite:
    - Testing m√°s f√°cil
    - M√∫ltiples configuraciones (dev, prod, test)
    - Inicializaci√≥n controlada de componentes
    
    Returns:
        Flask: Aplicaci√≥n Flask configurada y lista para usar
    """
    # Crear instancia de Flask
    app = Flask(__name__)
    
    # Configuraciones b√°sicas
    app.config['JSON_SORT_KEYS'] = False  # Preservar orden en respuestas JSON
    app.config['JSONIFY_PRETTYPRINT_REGULAR'] = True  # JSON formateado en desarrollo
    
    return app

# Crear la aplicaci√≥n principal
app = create_app()

# =============================================================================
# INICIALIZACI√ìN DE BASE DE DATOS
# =============================================================================

print("üöÄ Iniciando Monster Hunter Weapons API...")
print("üîó Conectando a base de datos PostgreSQL...")

# Inicializar base de datos al arrancar la aplicaci√≥n
# Esto crea las tablas si no existen (safe operation)
init_db()

print("üìä Base de datos inicializada correctamente")

# =============================================================================
# REGISTRO DE BLUEPRINTS (RUTAS)
# =============================================================================

# Registrar blueprint de armas y categor√≠as
# Esto incluye todos los endpoints definidos en weapons_controller.py
app.register_blueprint(weapons_bp)

print("üõ£Ô∏è  Rutas registradas:")
print("   ‚Ä¢ GET    /categories              - Listar categor√≠as")
print("   ‚Ä¢ POST   /categories              - Crear categor√≠a")  
print("   ‚Ä¢ GET    /categories/{id}         - Obtener categor√≠a")
print("   ‚Ä¢ PUT    /categories/{id}         - Actualizar categor√≠a")
print("   ‚Ä¢ DELETE /categories/{id}         - Eliminar categor√≠a")
print("   ‚Ä¢ GET    /categories/{id}/weapons - Armas por categor√≠a")
print("   ‚Ä¢ GET    /weapons                 - Listar armas")
print("   ‚Ä¢ POST   /weapons                 - Crear arma")
print("   ‚Ä¢ GET    /weapons/{id}            - Obtener arma")
print("   ‚Ä¢ PUT    /weapons/{id}            - Actualizar arma")
print("   ‚Ä¢ DELETE /weapons/{id}            - Eliminar arma")

# =============================================================================
# ENDPOINTS ADICIONALES
# =============================================================================

@app.route('/')
def home():
    """
    Endpoint ra√≠z que proporciona informaci√≥n b√°sica de la API.
    
    Returns:
        JSON: Informaci√≥n de bienvenida y enlaces √∫tiles
    """
    return jsonify({
        'message': 'üèπ Monster Hunter Weapons API',
        'version': '1.0.0',
        'description': 'API REST para gesti√≥n de categor√≠as y armas de Monster Hunter',
        'endpoints': {
            'categories': '/categories',
            'weapons': '/weapons',
            'documentation': 'https://github.com/SeanOsorio/ClassApi'
        },
        'status': 'online',
        'author': 'Sean Osorio'
    })

@app.route('/health')
def health_check():
    """
    Endpoint de health check para monitoreo.
    
    Returns:
        JSON: Estado de salud de la aplicaci√≥n y base de datos
    """
    return jsonify({
        'status': 'healthy',
        'database': 'connected',
        'api_version': '1.0.0'
    })

# =============================================================================
# MANEJO GLOBAL DE ERRORES
# =============================================================================

@app.errorhandler(404)
def not_found(error):
    """Manejador para errores 404 - Recurso no encontrado."""
    return jsonify({
        'error': 'Endpoint no encontrado',
        'message': 'Verifica la URL y el m√©todo HTTP',
        'available_endpoints': [
            'GET /categories',
            'POST /categories', 
            'GET /weapons',
            'POST /weapons'
        ]
    }), 404

@app.errorhandler(405)
def method_not_allowed(error):
    """Manejador para errores 405 - M√©todo no permitido."""
    return jsonify({
        'error': 'M√©todo HTTP no permitido',
        'message': 'Verifica que est√©s usando el m√©todo correcto (GET, POST, PUT, DELETE)'
    }), 405

@app.errorhandler(500)
def internal_server_error(error):
    """Manejador para errores 500 - Error interno del servidor."""
    return jsonify({
        'error': 'Error interno del servidor',
        'message': 'Ha ocurrido un error inesperado. Int√©ntalo m√°s tarde.'
    }), 500

# =============================================================================
# PUNTO DE ENTRADA DE LA APLICACI√ìN
# =============================================================================

if __name__ == '__main__':
    print("=" * 50)
    print("üéÆ MONSTER HUNTER WEAPONS API")
    print("=" * 50)
    print("üåê Servidor iniciando en: http://127.0.0.1:5000")
    print("üìö Documentaci√≥n: https://github.com/SeanOsorio/ClassApi")
    print("üêõ Modo debug: ACTIVADO")
    print("=" * 50)
    
    # Iniciar servidor Flask en modo desarrollo
    app.run(
        debug=True,        # Modo debug para desarrollo
        host='127.0.0.1',  # Solo accesible localmente
        port=5000          # Puerto est√°ndar para desarrollo
    )
